<program>::=<function><program> | <function>
<function>::=<type><name> ( <arguments> ) { <body> }
<type>::=int | float | double | char | bool
<arguments>::=<argument> , <arguments> | <argument> | empty
<argument>::=<type><name> | <type><name> [ <integer> ]
<body>::=<structure><body> | <structure>
<structure>::=<initialization> | <if,else> | <equality> ; | <for> | <while> | <do,while> | <printf> | return <const_or_name> ;
<initialization>::=<type><equality> ;
<names>::=<name> , <names> | <name>
<equality>::=<name> = <expression> | <name> = ' <letter> ' | <name> = <true_or_false> | <name> [ <integer> ] = { <massive_args> } | <name> [ <integer> ] = " <words> " 
<expression>::=<term><next_expr>
<next_expr>::=<operation><expression> | empty
<term>::=<const_or_name> | ( <expression> )
<operation>::=+ | - | * | / | ^
<true_or_false>::=true | false
<massive_args>::=<const_or_name> , <massive_args> | <const_or_name>
<words>::=<word><punctuation_mark><words> | <word>
<punctuation_mark>::=, | . | - |   | ( | ) | ; | :
<if,else>::=if ( <conditions> ) { <body> } | if ( <conditions> ) { <body> } else { <body> }
<conditions>::=<condition><logical_oper><conditions> | <condition>
<condition>::=<const_or_name><compare_oper><const_or_name>
<compare_oper>::=< | > | == | != | <= | >=
<logical_oper>::=&& | ||
<for>::=for ( int <name> = <const_or_name> ; <name><compare_oper><const_or_name> ; <name><incr_or_decr> ) { <body> }
<incr_or_decr>::=-- | ++
<while>::=while ( <conditions> ) { <body> }
<do,while>::=do { <body> } while ( <conditions> ) ;
<printf>::=printf ( " <words> " , <names> ) ;
<const_or_name>::=<const> | <name>